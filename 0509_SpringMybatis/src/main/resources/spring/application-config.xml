<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- jdbc.properties파일이 복호화 타겟임을 알리는 객체 -->
	<bean id="propertyConfigurer"
	class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="configurationEncryptor" />
		<property name="locations">
			<list>
				<value>classpath:/database/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- 복호화를 위한 알고리즘 설정, PBEWithMD5AndDES 알고리즘을 사용한 난독화 -->
	<bean id="environmentVariablesConfiguration"
	class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES" />
		<property name="passwordEnvName" value="APP_ENCRYTPTION_PASSWORD" />
	</bean>
	
	<!-- 복호화 키 설정 -->
	<bean id="configurationEncryptor"
	class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="environmentVariablesConfiguration" />
		<property name="password" value="qwerasdf"/>
	</bean>


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />	
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" ref="classpath:com/coderby/myapp/**/*.xml" />
	</bean>
	
	
	
	<!-- 트랜잭션 사용을 위한 txManager 빈 파일 설정 -->
	<bean id="txManager" 
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Mybatis에 적용하기 위한 트랜젝션 설정 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="set" rollback-for="RuntimeException"/>
			<tx:method name="add" rollback-for="RuntimeException"/>
			<tx:method name="update" rollback-for="RuntimeException"/>
			<tx:method name="modify" rollback-for="RuntimeException"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Mybatis 관련 위빙 설정 -->
	<aop:config>
		<aop:pointcut id="servicePublicMethod" expression="execution(public * com.coderby..*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePublicMethod" />
	</aop:config>
	
	<!-- Mybatis 구현 xml 파일을 스캔할 수 있도록 경로 지정 -->
	<mybatis-spring:scan base-package="com.coderby.myapp.hr.dao" />
	
	
	<!-- 어노테이션을 사용한 트랜잭션 스캔 설정 -->
	<!-- <tx:annotation-driven transaction-manager="txManager" /> -->
	
	<!-- 트랜잭션 지침 설정 -->
	<!-- 
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	 -->
	<!-- 포인트컷에 트랜잭션 객체 위빙 -->
	<!-- 
	<aop:config>
		<aop:pointcut id="txPointcut" 
		expression="execution(* com.coderby.myapp..*Service.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	 -->
	<context:component-scan base-package="com.coderby.myapp.hr" />

</beans>


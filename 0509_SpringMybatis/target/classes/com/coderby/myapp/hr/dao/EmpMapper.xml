<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.coderby.myapp.hr.dao.IEmpRepository">

	<resultMap id="empMap" type="com.coderby.myapp.hr.model.EmpVO">
		<result property="employeeId" column="EMPLOYEE_ID"/>
		<result property="firstName" column="FIRST_NAME"/>
		<result property="lastName" column="LAST_NAME"/>
		<result property="email" column="EMAIL"/>
		<result property="phoneNumber" column="PHONE_NUMBER"/>
		<result property="hireDate" column="HIRE_DATE"/>
		<result property="jobId" column="JOB_ID"/>
		<result property="salary" column="SALARY"/>
		<result property="commissionPct" column="COMMISSION_PCT"/>
		<result property="managerId" column="MANAGER_ID"/>
		<result property="departmentId" column="DEPARTMENT_ID"/>
	</resultMap>

	<select id="getEmpCount" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM EMPLOYEES
		<if test="deptid != null">
			WHERE DEPARTMENT_ID = #{deptid}
		</if>
	</select>

	<select id="getEmpList" resultMap="empMap">
 		SELECT * FROM EMPLOYEES
	</select>

	<select id="getEmpInfo" parameterType="int" resultMap="empMap">
 		SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = #{empid}
	</select>
	
	<insert id="insertEmp" parameterType="com.coderby.myapp.hr.model.EmpVO">
		INSERT INTO EMPLOYEES 
		VALUES (
			#{employeeId}, #{firstName}, #{lastName}, #{email}, #{phoneNumber}, 
			SYSDATE, #{jobId}, #{salary}, #{commissionPct}, #{managerId}, #{departmentId}
		)
	</insert>

	<update id="updateEmp" parameterType="com.coderby.myapp.hr.model.EmpVO">
		UPDATE	employees 
		SET		first_name=#{firstName}, last_name=#{lastName}, email=#{email}, 
				phone_number=#{phoneNumber}, hire_date=#{hireDate}, job_id=#{jobId}, 
				salary=#{salary}, commission_pct=#{commissionPct}, manager_id=#{managerId}, 
				department_id=#{departmentId} 
		WHERE employee_id=?
	</update>

	<delete id="updateEmp">
		DELETE FROM	employees 
		WHERE employee_id=#{empid} AND email=#{email}
	</delete>

	<select id="getAllDeptId" resultType="hashmap">
		SELECT	department_id AS "departmentId", 
				department_name AS "departmentName" 
		FROM departments
	</select>
	
	<select id="getAllJobId" resultType="hashmap">
		SELECT	job_id AS "jobId", 
				job_title AS "jobTitle" 
		FROM jobs
	</select>
	
	<select id="getAllManagerId" resultType="hashmap">
		SELECT	 d.manager_id AS "managerId", e.first_name AS "firstName" 
		FROM	 departments d JOIN employees e ON d.manager_id = e.employee_id 
		ORDER BY d.manager_id
	</select>
	
	
</mapper>